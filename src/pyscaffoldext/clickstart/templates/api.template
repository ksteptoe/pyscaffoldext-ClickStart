# ---- Python API ----
# The functions defined in this section can be imported by users in their
# Python scripts/interactive interpreter, e.g. via
# `from my_test_project.${package} import ${package}`,
# when using this Python module as a library.

import logging
import sys
from ${qual_pkg} import __version__

_logger = logging.getLogger(__name__)


def setup_logging(loglevel):
    """Setup basic logging

    Args:
      loglevel (int): minimum loglevel for emitting messages
    """
    logformat = "[%(asctime)s] %(levelname)s:%(name)s:%(message)s"
    logging.basicConfig(
        level=loglevel, stream=sys.stdout, format=logformat, datefmt="%Y-%m-%d %H:%M:%S"
    )


def ${package}_api(n: int, loglevel: int ):
    """Wrapper allowing :func: $(package) to be called with string arguments in a CLI fashion

    Args:
      n: int integer argument to calculate fibonacci
      loglevel: int
    """
    setup_logging(loglevel)
    _logger.info(f"Version: {__version__}")
    print("The {}-th Fibonacci number is {}".format(n, ${package}(n)))
    _logger.info("Script ends here")


def ${package}(n):
    """${package} provides a Fibonacci example function

    Args:
      n (int): integer

    Returns:
      int: n-th Fibonacci number
    """
    assert n > 0
    a, b = 1, 1
    for _i in range(n - 1):
        a, b = b, a + b
    return a

